{
  "compilerOptions": {
    "allowJs": false,
    "declaration": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSourceMap": true,
    "module": "commonjs",
    "noEmitOnError": false,
    "noImplicitAny": true,
    "outDir": "./build",
    "removeComments": true,
    "resolveJsonModule": true,
    "rootDir": "./src",
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "strictNullChecks": true,
    "target": "es2020"
  },
  "exclude": [
    "node_modules/core-js/**", 
    "node_modules/regenerator-runtime/**" 
  ],
  "include": [
    "src/**/*.ts", 
    "node_modules/express/**/*.ts"
  ],
  "typeAcquisition": {"node": "16"}, // Especificar la versión de Node.js para la adquisición de tipos
  "typeRoots": ["./node_modules/@types"] ,
  "types": ["node"]
}

/*
"allowJs": false, // Permitir archivos JavaScript en el proyecto
    "declaration": true, // Generar archivos de declaración .d.ts
    "esModuleInterop": true, // Habilitar la interoperabilidad con módulos ES
    "forceConsistentCasingInFileNames": true, // Forzar nombres de archivo consistentes
    "inlineSourceMap": true, // Incrustar mapas de origen en el código transpilado (producción)
    "module": "commonjs", // módulo nativo de Node.js, configuramos como se transpilara el codigo para exportar e importar los modulos en javascript
    "outDir": "./build", // Especificar la carpeta de salida para el código transpilado
    "removeComments": true, // Eliminar comentarios del código transpilado (producción)
    "resolveJsonModule": true, // Resolver módulos JSON
    "rootDir": "./src", //el compilador TypeScript usará esta carpeta como punto de referencia al resolver rutas de archivo en las propiedades include y exclude
    "skipLibCheck": true, // Omitir la verificación de la biblioteca de tipos
    "strict": true, // Habilitar el modo estricto de TypeScript
    "target": "es2020", // version d JavaScript ES2020(ecma script), a q version d javascript se transpilara el codigo
    "noEmitOnError": false, //genera código JavaScript incluso con errores, lo que te facilitará la depuración de los errores.
    "noImplicitAny": true, // se utiliza para hacer que el compilador emita un error cuando no puede inferir el tipo de una variable. P
    "sourceMap": true, //útil p/la depuración, y/q permite v/l código TypeScript original cuando c produce un error nl código JavaScript.
    "strictNullChecks": false,  //habilita la comprobación estricta de tipos nulos en TypeScript.
    "downlevelIteration": true, // no es útil para l target ES2020  ya q los bucles c compilan a código JavaScript nativo
    "experimentalDecorators": true, //no es útil para l target ES2020, ya que los decoradores ya son una característica estable 
    "exclude": [ //especifica un conjunto de patrones de archivos y carpetas que TypeScript debería excluir del proceso de compilación
      "node_modules/core-js/**", 
      "node_modules/regenerator-runtime/**" 
    ],
    "include": [ //especifica un conjunto de patrones de archivos y carpetas que TypeScript debería incluir en el proceso de compilación.
      "src/**//*.ts"
      "node_modules/express/**//*.ts"
    ],
    "typeAcquisition": {
      "node": "16"
    },
    diario 
*/